{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import json\n",
    "from datetime import datetime\n",
    "from collections import Counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_review = '/Users/madshelt/Downloads/dataset/review.json'\n",
    "y_business = '/Users/madshelt/Downloads/dataset/business.json'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def yelp_data_generator(file_path):\n",
    "    with open(file_path) as f:\n",
    "        for line in f:\n",
    "            # yield the the data line-by-line\n",
    "            yield json.loads(line.rstrip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# create generator object\n",
    "reviews = yelp_data_generator(y_review)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "business = yelp_data_generator(y_business)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:12:02.637345\n"
     ]
    }
   ],
   "source": [
    "# converting generator object to data frame\n",
    "t1 = datetime.now()\n",
    "df_reviews = pd.DataFrame.from_records(reviews, coerce_float=True, exclude=['review_id','user_id','date'])\n",
    "print(datetime.now() - t1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:00:45.932082\n"
     ]
    }
   ],
   "source": [
    "t1 = datetime.now()\n",
    "df_business = pd.DataFrame.from_records(business, coerce_float=True, exclude=['name','neighborhood','address','city',\n",
    "                                                                             'latitude', 'longitude',\n",
    "                                                                             'stars', 'review_count', 'is_open',\n",
    "                                                                             'attributes', 'categories', 'hours'])\n",
    "print(datetime.now() - t1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4736897"
      ]
     },
     "execution_count": 309,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_reviews)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "156639"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_business)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>cool</th>\n",
       "      <th>funny</th>\n",
       "      <th>stars</th>\n",
       "      <th>text</th>\n",
       "      <th>useful</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>uYHaNptLzDLoV_JZ_MuzUA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>My girlfriend and I stayed here for 3 nights a...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>uYHaNptLzDLoV_JZ_MuzUA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>If you need an inexpensive place to stay for a...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>uYHaNptLzDLoV_JZ_MuzUA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mittlerweile gibt es in Edinburgh zwei Ableger...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>uYHaNptLzDLoV_JZ_MuzUA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>Location is everything and this hotel has it! ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>uYHaNptLzDLoV_JZ_MuzUA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>gute lage im stadtzentrum. shoppingmeile und s...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              business_id  cool  funny  stars  \\\n",
       "0  uYHaNptLzDLoV_JZ_MuzUA     0      0      5   \n",
       "1  uYHaNptLzDLoV_JZ_MuzUA     0      0      3   \n",
       "2  uYHaNptLzDLoV_JZ_MuzUA     0      0      3   \n",
       "3  uYHaNptLzDLoV_JZ_MuzUA     0      0      4   \n",
       "4  uYHaNptLzDLoV_JZ_MuzUA     0      0      5   \n",
       "\n",
       "                                                text  useful  \n",
       "0  My girlfriend and I stayed here for 3 nights a...       0  \n",
       "1  If you need an inexpensive place to stay for a...       0  \n",
       "2  Mittlerweile gibt es in Edinburgh zwei Ableger...       0  \n",
       "3  Location is everything and this hotel has it! ...       0  \n",
       "4  gute lage im stadtzentrum. shoppingmeile und s...       0  "
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_reviews.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>postal_code</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>YDf95gJZaq05wvo7hTQbbQ</td>\n",
       "      <td>44143</td>\n",
       "      <td>OH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>mLwM-h2YhXl2NCgdS84_Bw</td>\n",
       "      <td>28215</td>\n",
       "      <td>NC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>v2WhjAB3PIBA8J8VxG3wEg</td>\n",
       "      <td>M4K 1N7</td>\n",
       "      <td>ON</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CVtCbSB1zUcUWg-9TNGTuQ</td>\n",
       "      <td>85258</td>\n",
       "      <td>AZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>duHFBe87uNSXImQmvBh87Q</td>\n",
       "      <td>85016</td>\n",
       "      <td>AZ</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              business_id postal_code state\n",
       "0  YDf95gJZaq05wvo7hTQbbQ       44143    OH\n",
       "1  mLwM-h2YhXl2NCgdS84_Bw       28215    NC\n",
       "2  v2WhjAB3PIBA8J8VxG3wEg     M4K 1N7    ON\n",
       "3  CVtCbSB1zUcUWg-9TNGTuQ       85258    AZ\n",
       "4  duHFBe87uNSXImQmvBh87Q       85016    AZ"
      ]
     },
     "execution_count": 312,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_business.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Scraping US states from Wikipedia**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "import requests \n",
    "text = requests.get('https://en.wikipedia.org/wiki/List_of_states_and_territories_of_the_United_States').text \n",
    "text = BeautifulSoup(text, 'html.parser')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "state_list = []\n",
    "for i in text.find('table', attrs = {'class': 'wikitable'}).find_all('tr')[2:]:\n",
    "    cells = i.find_all([\"td\"])\n",
    "    state_list.append(cells[0].get_text()[0:2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Merge review and business**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = pd.merge(left = df_reviews, right = df_business, how = 'inner', on = 'business_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>cool</th>\n",
       "      <th>funny</th>\n",
       "      <th>stars</th>\n",
       "      <th>text</th>\n",
       "      <th>useful</th>\n",
       "      <th>postal_code</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>uYHaNptLzDLoV_JZ_MuzUA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>My girlfriend and I stayed here for 3 nights a...</td>\n",
       "      <td>0</td>\n",
       "      <td>EH1</td>\n",
       "      <td>EDH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>uYHaNptLzDLoV_JZ_MuzUA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>If you need an inexpensive place to stay for a...</td>\n",
       "      <td>0</td>\n",
       "      <td>EH1</td>\n",
       "      <td>EDH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>uYHaNptLzDLoV_JZ_MuzUA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mittlerweile gibt es in Edinburgh zwei Ableger...</td>\n",
       "      <td>0</td>\n",
       "      <td>EH1</td>\n",
       "      <td>EDH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>uYHaNptLzDLoV_JZ_MuzUA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>Location is everything and this hotel has it! ...</td>\n",
       "      <td>0</td>\n",
       "      <td>EH1</td>\n",
       "      <td>EDH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>uYHaNptLzDLoV_JZ_MuzUA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>gute lage im stadtzentrum. shoppingmeile und s...</td>\n",
       "      <td>0</td>\n",
       "      <td>EH1</td>\n",
       "      <td>EDH</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              business_id  cool  funny  stars  \\\n",
       "0  uYHaNptLzDLoV_JZ_MuzUA     0      0      5   \n",
       "1  uYHaNptLzDLoV_JZ_MuzUA     0      0      3   \n",
       "2  uYHaNptLzDLoV_JZ_MuzUA     0      0      3   \n",
       "3  uYHaNptLzDLoV_JZ_MuzUA     0      0      4   \n",
       "4  uYHaNptLzDLoV_JZ_MuzUA     0      0      5   \n",
       "\n",
       "                                                text  useful postal_code state  \n",
       "0  My girlfriend and I stayed here for 3 nights a...       0         EH1   EDH  \n",
       "1  If you need an inexpensive place to stay for a...       0         EH1   EDH  \n",
       "2  Mittlerweile gibt es in Edinburgh zwei Ableger...       0         EH1   EDH  \n",
       "3  Location is everything and this hotel has it! ...       0         EH1   EDH  \n",
       "4  gute lage im stadtzentrum. shoppingmeile und s...       0         EH1   EDH  "
      ]
     },
     "execution_count": 316,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# filter out non-US states\n",
    "sub_df = df.loc[(df['state'].isin(state_list))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3952097"
      ]
     },
     "execution_count": 318,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(sub_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sub_df = sub_df.drop(['business_id', 'postal_code', 'state'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cool</th>\n",
       "      <th>funny</th>\n",
       "      <th>stars</th>\n",
       "      <th>text</th>\n",
       "      <th>useful</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>This place is horrible, we were so excited to ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>For being fairly \"fast\" food.. Pei Wei (pronou...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>I decided to try it out, I'm celiac and theref...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>I'm not saying Pei Wei is the best asian food ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sometimes the food is spot on and delicious an...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    cool  funny  stars                                               text  \\\n",
       "16     0      0      1  This place is horrible, we were so excited to ...   \n",
       "17     0      0      4  For being fairly \"fast\" food.. Pei Wei (pronou...   \n",
       "18     1      1      5  I decided to try it out, I'm celiac and theref...   \n",
       "19     1      1      3  I'm not saying Pei Wei is the best asian food ...   \n",
       "20     0      0      3  Sometimes the food is spot on and delicious an...   \n",
       "\n",
       "    useful  \n",
       "16       0  \n",
       "17       1  \n",
       "18       2  \n",
       "19       1  \n",
       "20       0  "
      ]
     },
     "execution_count": 321,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Downsampling to get a balanced dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 553,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# multilabel downsampling\n",
    "from collections import Counter\n",
    "\n",
    "def balance_classes(xs, ys):\n",
    "    \"\"\"Undersample xs, ys to balance classes.\"\"\"\n",
    "    freqs = Counter(ys)\n",
    "\n",
    "    # the least common class is the maximum number we want for all classes\n",
    "    max_allowable = 100000 #freqs.most_common()[-1][1]\n",
    "    num_added = {clss: 0 for clss in freqs.keys()}\n",
    "    new_ys = []\n",
    "    new_xs = []\n",
    "    for i, y in enumerate(ys):\n",
    "        if num_added[y] < max_allowable:\n",
    "            new_ys.append(y)\n",
    "            new_xs.append(xs[i])\n",
    "            num_added[y] += 1\n",
    "    return new_xs, new_ys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 555,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "texts = [review for review in sub_df['text']]\n",
    "binstars = [star for star in sub_df['stars']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 556,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counter({5: 1746160, 4: 884962, 1: 558811, 3: 435600, 2: 326564})\n",
      "Counter({1: 100000, 2: 100000, 3: 100000, 4: 100000, 5: 100000})\n"
     ]
    }
   ],
   "source": [
    "print(Counter(binstars))\n",
    "balanced_x, balanced_y = balance_classes(texts, binstars)\n",
    "print(Counter(balanced_y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# binary downsampling\n",
    "texts = [review for review in sub_df['text']]\n",
    "\n",
    "# Convert 5 classes of rating into binary - 0 for negative and 1 for positive\n",
    "binstars = [0 if review <= 3 else 1 for review in sub_df['stars']]\n",
    "\n",
    "balanced_texts = []\n",
    "balanced_labels = []\n",
    "limit = 1000\n",
    "neg_pos_counts = [0, 0]\n",
    "\n",
    "for i in range(len(texts)):\n",
    "    polarity = binstars[i]\n",
    "    if neg_pos_counts[polarity] < limit:\n",
    "        balanced_texts.append(texts[i])\n",
    "        balanced_labels.append(binstars[i])\n",
    "        neg_pos_counts[polarity] += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({0: 100000, 1: 100000})"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check to see if we have 100k for each label\n",
    "Counter(balanced_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# removing empty lines\n",
    "balanced_ = []\n",
    "for word in balanced_texts:\n",
    "    balanced_.append(re.sub('\\n',\"\", word))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# writing out txt file with reviews\n",
    "with open('./Desktop/Dataset/balanced_text.txt', 'w') as file:\n",
    "    for review in balanced_:\n",
    "        file.write(\"%s\\n\" % review)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# writing out txt file with labels\n",
    "with open('./Desktop/Dataset/balanced_label.txt', 'w') as file:\n",
    "    for label in balanced_labels:\n",
    "        file.write(\"%i\\n\" % label)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data Preparation ** <br>\n",
    "*The manual way*\n",
    "\n",
    "First step is to clean the text. This is a never-ending job, so the objective is to clean the text as simple as possible. Primarily focused on \"tokenization\", meaning splitting text into tokens, where each word is a token.\n",
    "\n",
    "*Chapter 5*\n",
    "- Clean text manually\n",
    "    + Manual Tokenization\n",
    "        + Split by Whitespace (select words)\n",
    "        + Select Words (with re)\n",
    "        + Remove punctuation\n",
    "        + Normalizing Case (lowercase)\n",
    "- Clean text with NLTK\n",
    "    + Split into sentences\n",
    "    + Split into words\n",
    "    + Filter out punctuation\n",
    "    + Filter out stop words\n",
    "    + Stem words \n",
    "\n",
    "Next step is to encode words as integers or floating point values (this is called \"vectorization\"). Algorithms take fixed-length vectors of numbers as input.\n",
    "\n",
    "*Chapter 6 - scikit-learn* \n",
    "\n",
    "Scikit-learn can perform both tokenization and feature extraction of the text. Bag-of-Words Model is used as a base.\n",
    "- CountVectorizer (both tokenization and vocabulary)\n",
    "- TfidVectorizer (word frequencies)\n",
    "    + Note: input can be a learned CountVectorizer \n",
    "- HashingVectorizer\n",
    "\n",
    "The books mentions that there are several other configurations to influence the tokenizing of text that are worth exploring.\n",
    "\n",
    "*Chapter 7 - Keras*\n",
    "\n",
    "The Keras deep learning library provides some basic tools to prepare the text. Some of these methods overlap (is a mix) with the methods specified in chapter 5 and 6.\n",
    "- Text_to_word_sequence (split words) - does 3 things:\n",
    "    + 1) Splits words by space, 2) filter out punctuation, 3) converts text to lowercase\n",
    "- one_hot encoding - does 3 things:\n",
    "    + 1) Splits words by space, 2) filter out punctuation, 3) converts text to lowercase\n",
    "    + text_to_word_sequence can be used as a pre-step to represent only the unique words in the document\n",
    "- hashing_trick (hash encoding)\n",
    "- Tokenizer (API)\n",
    "    + class to prepare text with not just one-off methods like the 3 above.\n",
    "    + Tokenizer can be fit on either raw text documents or integer encoded text documents. \n",
    "\n",
    "\n",
    "*Word Embedding*\n",
    "\n",
    "\"it may no-longer make sense to stem words or remove punctuation for contractions... He (Mikolov) suggest only very minimal text cleaning is required when learning a word embedding model.\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "**Splitting in train and test set**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# import balanced_text\n",
    "with open('./Desktop/Dataset/balanced_text.txt', 'r') as file:\n",
    "    balanced_text = file.readlines()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200234"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(balanced_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# import balanced_labels\n",
    "import numpy as np\n",
    "balanced_labels = []\n",
    "with open('./Desktop/Dataset/balanced_label.txt', 'r') as file:\n",
    "    for label in file:\n",
    "        balanced_labels.append(label.strip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200000"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(balanced_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df = pd.DataFrame(data = list(zip(balanced_text,\n",
    "                                     balanced_labels)),\n",
    "            columns = ['text', 'sentiment'], dtype = 'int' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(200000, 2)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(df['text'], \n",
    "                                                    df['sentiment'], \n",
    "                                                    test_size=0.2, \n",
    "                                                    random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exporting datasets**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('./Desktop/Dataset/X_train.txt', 'w') as file:\n",
    "    for dataset in X_train:\n",
    "        file.write(\"%s\" % dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open('./Desktop/Dataset/X_test.txt', 'w') as file:\n",
    "    for dataset in X_test:\n",
    "        file.write(\"%s\" % dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_train.to_csv('./Desktop/Dataset/y_train.txt', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_test.to_csv('./Desktop/Dataset/y_test.txt', index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Importing y_train and y_test**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "text_file = open('./Desktop/Dataset/y_train.txt', 'r')\n",
    "y_train = text_file.read().split('\\n')\n",
    "y_train = [list(map(int, x)) for x in y_train]\n",
    "y_train = y_train[:-1]\n",
    "y_train = np.array(y_train).ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "text_file = open('./Desktop/Dataset/y_test.txt', 'r')\n",
    "y_test = text_file.read().split('\\n')\n",
    "y_test = [list(map(int, x)) for x in y_test]\n",
    "y_test = y_test[:-1]\n",
    "y_test = np.array(y_test).ravel()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Develop Word2vec Embedding**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to build an iterator that loads the text, instead of loading all text into memory since this can use up a lot of RAM for a large corpora. \n",
    "\n",
    "Gensim's word2vec expects a sequence of sentences as its input. Therefore, we can build an iterator and provide gensim with one sentence at a time, process it, forget it, and load another sentence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# iterator for the non-empty reviews\n",
    "import re\n",
    "\n",
    "class MyCorpus(object):  \n",
    "    def __init__(self, filename):\n",
    "        self.filename = filename\n",
    "        \n",
    "    def __iter__(self):\n",
    "        for line in open(self.filename):\n",
    "            review = re.sub(\"[^a-zA-Z]\",\" \", line)\n",
    "            review = review.lower().split()\n",
    "            if review:\n",
    "                yield review"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# iterator to store the index of non-empty reviews\n",
    "class MyCorpus_index(object):  \n",
    "    def __init__(self, filename):\n",
    "        self.filename = filename\n",
    "        \n",
    "    def __iter__(self):\n",
    "        count = -1\n",
    "        for line in open(self.filename):\n",
    "            review = re.sub(\"[^a-zA-Z]\",\" \", line)\n",
    "            review = review.lower().split()\n",
    "            count += 1\n",
    "            if review:\n",
    "                yield count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "balanced_t = MyCorpus('./Desktop/Dataset/balanced_text.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tokened = []\n",
    "for word in balanced_t:\n",
    "    tokened.append(word)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# save iterator object for train reviews\n",
    "reviews_train = MyCorpus('./Desktop/Dataset/X_train.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# save iterator object for test reviews\n",
    "reviews_test = MyCorpus('./Desktop/Dataset/X_test.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# save iterator object for train index number\n",
    "index_train = MyCorpus_index('./Desktop/Dataset/X_train.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# save iterator object for train index number\n",
    "index_test = MyCorpus_index('./Desktop/Dataset/X_test.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# save index numbers for non-empty reviews in training set\n",
    "indices_train = []\n",
    "for index_num in index_train:\n",
    "    indices_train.append(index_num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# save index numbers for non-empty reviews in testing set\n",
    "indices_test = []\n",
    "for index_num in index_test:\n",
    "    indices_test.append(index_num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of empty reviews filtered out:  86\n"
     ]
    }
   ],
   "source": [
    "# filter out labels for corresponding empty reviews\n",
    "y_train = y_train[indices_train]\n",
    "print(\"No. of empty reviews filtered out: \", 160000 - len(y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of empty reviews filtered out:  22\n"
     ]
    }
   ],
   "source": [
    "# filter out labels for corresponding empty reviews\n",
    "y_test = y_test[indices_test]\n",
    "print(\"No. of empty reviews filtered out: \", 40000 - len(y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "start training word2vec model...\n",
      "CPU times: user 9min 3s, sys: 6.38 s, total: 9min 10s\n",
      "Wall time: 3min 52s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "import os\n",
    "from gensim.models import Word2Vec\n",
    "import multiprocessing\n",
    "cores = multiprocessing.cpu_count()\n",
    "\n",
    "if not os.path.exists('./Desktop/Dataset/word2vec'):\n",
    "    print(\"start training word2vec model...\")\n",
    "    #sentences = MySentences() # a memory-friendly iterator\n",
    "    word2vec_model = Word2Vec(reviews_train, min_count=5, size=300, workers=cores)\n",
    "    if not os.path.exists('./Desktop/Dataset/word2vec'):\n",
    "        os.makedirs('./Desktop/Dataset/word2vec')\n",
    "        word2vec_model.wv.save_word2vec_format('./Desktop/Dataset/word2vec300.txt', binary=False)\n",
    "    else:\n",
    "        word2vec_model.wv.save_word2vec_format('./Desktop/Dataset/word2vec300.txt', binary=False)\n",
    "else:\n",
    "    word2vec_model = Word2Vec.load('./Desktop/Dataset/word2vec300.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Word2Vec(vocab=31287, size=200, alpha=0.025)\n"
     ]
    }
   ],
   "source": [
    "print(word2vec_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Importing trained word2vec with 300 dim\n",
    "from gensim.models import Word2Vec\n",
    "model = Word2Vec.load('./Desktop/Dataset/word2vec/word2vec.model')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(31287, 300)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dimension of word2vec model (vocabulary)\n",
    "model.wv.syn0.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Word2Vec(vocab=31287, size=100, alpha=0.025)\n"
     ]
    }
   ],
   "source": [
    "# printing trained word2vec model\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['threads', 'oils', 'starsthis', 'diffuse', 'mehr', 'westin', 'slathering', 'blends', 'sushimon', 'bile', 'garners', 'griping', 'chuy', 'adverse', 'hued', 'built', 'sind', 'poboy', 'arrival', 'dangling', 'nauseous', 'persona', 'humiliating', 'thali', 'condemned']\n"
     ]
    }
   ],
   "source": [
    "words = list(model.wv.vocab)\n",
    "print(words[0:25])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1131,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1.01985347 -0.92030841 -0.36698216  0.29141989 -4.11649704  0.881863\n",
      "  1.3686372   0.80261707  0.76257765 -0.35457465  1.23338819 -0.12996946\n",
      "  0.75558692  0.81737649 -1.13246059  1.12607467  2.89836645  0.8002097\n",
      " -2.4531641  -1.37292945 -1.23263156  2.28367233 -0.19968054 -2.61984444\n",
      " -0.90037179 -2.15741515  1.11329913  0.52432126  1.75764751  1.21806061\n",
      "  1.2726866   1.04156113  0.68980438 -0.47584215  1.18588352 -0.13512409\n",
      "  0.89811528 -1.19637299 -3.57312942  0.60238284 -1.10418105 -0.50095367\n",
      " -4.20460558  1.85209751 -2.88727021  3.45114183 -1.1068213  -1.02261639\n",
      "  2.87409043  2.26110959  2.2606895  -0.33208498  1.10801852 -0.77657634\n",
      " -0.17789106 -0.28216431  0.82387638 -2.9798398  -1.15588248 -0.67613989\n",
      "  0.49363005 -2.70754743 -0.09256826  0.8114953   2.23548889  5.10977221\n",
      " -0.03705682  0.04739144  0.42341614  2.32812667  1.6929096   0.4161199\n",
      "  0.73858583  1.02582514 -1.46915281  0.95640284 -1.34836721  2.14373422\n",
      "  0.9122265  -0.64642918  1.20237935 -0.04327845 -0.26766688  1.60922718\n",
      "  3.40949202  2.65491295 -4.7462039  -0.8601566  -0.0097908  -0.71818751\n",
      "  0.00938307  0.27142751 -0.50033379 -1.34249473 -2.11150599 -3.21335578\n",
      "  0.89331537 -3.87522674  1.71709514 -3.36043549]\n"
     ]
    }
   ],
   "source": [
    "# Word vectors: 100 dimensions for the word 'good'\n",
    "print(model['good']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('sashimi', 0.6762856245040894),\n",
       " ('nigiri', 0.6616212129592896),\n",
       " ('seafood', 0.6350231766700745),\n",
       " ('poke', 0.567468523979187),\n",
       " ('ayce', 0.5664577484130859),\n",
       " ('ramen', 0.5485618114471436),\n",
       " ('maki', 0.5360989570617676),\n",
       " ('uni', 0.5323463678359985),\n",
       " ('pho', 0.5309431552886963),\n",
       " ('food', 0.5254984498023987)]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# look up top10 most similar words\n",
    "model.wv.most_similar('sushi')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('wah', 0.5090364217758179)]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculate (spaghetti - italian) + chinese\n",
    "model.most_similar(positive=['chinese', 'spaghetti'], negative=['italian'], topn=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1135,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Return a Keras 'Embedding' layer with weights set as the Word2Vec model's learned word embeddings\n",
    "embedding_layer = model.wv.get_keras_embedding()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.58051884,  0.361065  , -2.43268204, ..., -1.49426472,\n",
       "        -0.59179926,  0.90500379],\n",
       "       [-0.57821208,  0.72524977, -1.13111877, ...,  0.00877488,\n",
       "         0.16908607,  0.86917043],\n",
       "       [ 3.07706475, -2.0311029 ,  0.99512571, ...,  2.74762988,\n",
       "        -2.06964278,  2.01257849],\n",
       "       ..., \n",
       "       [-0.02107974,  0.07751742,  0.07365621, ...,  0.04360363,\n",
       "        -0.0262667 , -0.00674342],\n",
       "       [-0.00795934,  0.06846277, -0.03547641, ...,  0.01492627,\n",
       "        -0.04258793,  0.05085544],\n",
       "       [-0.02047236,  0.11883926,  0.03599071, ...,  0.06603737,\n",
       "        -0.04432582,  0.01785531]], dtype=float32)"
      ]
     },
     "execution_count": 1134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# output layer of the trained neural network (in this case we have 34334 words * 100 vectors)\n",
    "model.wv.syn0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('gem', 0.015245982),\n",
       " ('love', 0.014233463),\n",
       " ('avoid', 0.012601318),\n",
       " ('sucks', 0.010963863),\n",
       " ('skip', 0.010406211),\n",
       " ('rocks', 0.0078356536),\n",
       " ('dump', 0.0074927113),\n",
       " ('deserves', 0.0050018546),\n",
       " ('recommend', 0.0038076825),\n",
       " ('patronize', 0.0037873483)]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# probability distribution of the center word given the context words as input\n",
    "model.predict_output_word(['this', 'place'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Methods to use after training word2vec***\n",
    "\n",
    "There are some tricky methods to use to extract information about the training word embedding (word vector).\n",
    "\n",
    "Get the vocabulary of the word embedding:\n",
    "\n",
    "1. Extract the vocabulary\n",
    "```python\n",
    "model.wv.vocab\n",
    "``` \n",
    "\n",
    "2. Extract vectors of a specific word (returns all dimensions)\n",
    "```python\n",
    "model['good']\n",
    "model.wv.word_vec('spaghetti')\n",
    "```\n",
    "\n",
    "3. Return a list of top-10 similar words (probability distribution)\n",
    "```python\n",
    "model.wv.most_similar('price')\n",
    "```\n",
    "\n",
    "4. Extract the output layer (word vectors for each word)\n",
    "```python\n",
    "model.wv.syn0\n",
    "```\n",
    "\n",
    "5. Extract a Keras embedding layer (weight set as trained worc2vec model)\n",
    "```python\n",
    "model.wv.get_keras_embedding\n",
    "```\n",
    "\n",
    "6. Math operations to calculate similarity\n",
    "```python\n",
    "model.most_similar(positive=['chinese', 'spaghetti'], negative=['italian'], topn=1)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Visualize Word2vec**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X = model[model.wv.vocab]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "pca = PCA(n_components=2, random_state=42)\n",
    "result = pca.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x115412b00>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.scatter(result[:, 0], result[:, 1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nUpA+fQb4pzHmIIAxRv16dytInxrgAcuyLKAccAq4fulVKVbGmB/J6af8FDpOUmB897ony0nLDRW2\nz/oDX9/RFsmtumGfWpb1CNAJXdW5VxTke1oHqGhZ1lrLsmIty3q2yFonN6MgfToTqAccBRKAF4wx\n2UXTPLlDCh0nKV2byF3Ksqxm5ATGwcXdFrll75NT6j07ZzBK7gMlgAZAGFAG2GhZ1iZjzJ7ibZbc\nglZAPNAcqAV8Z1nWOmPM78XbLClKCozvXre1nLTcNQrUZ5Zl+QDzgDbGmJNF1Da5OQXp04bAZ5eC\n4geBtpZlXTTGLC+aJkohFaRPDwMnjTFngDOWZf0I+AIKjO9OBenTvsDfLtUX+NmyrBSgLrC5aJoo\nd0Ch4yRNpbh7qZz0/emG/WpZ1qPAP4HeGn26J9ywT40xbsYYV2OMK7AMeE5B8V2tIL9/vwCCLcsq\nYVlWWSAQSCridkrBFaRPD5JzBQDLsqoB7sD+Im2l3G6FjpM0YnyXUjnp+1MB+3UcUBn44NII40Vj\nTMPiarNcXwH7VO4hBelTY0ySZVnfADuAbGCeMSbPlFFS/Ar4PZ0ERFuWlQBY5Ex/OlFsjZYbsizr\n/5GTQeRBy7IOA+MBJ7j5OEmV70RERERE0FQKERERERFAgbGIiIiICKDAWEREREQEUGAsIiIiIgIo\nMBYRERERARQYi4iIiIgACoxFRERERAAFxiIiIiIigAJjERERERFAgbGIiIiICKDAWEREREQEUGAs\nIiIiIgIoMBYRERERARQYi4iIiIgACoxFRERERAAFxiIiIiIigAJjERERERFAgbGIiIiICKDAWERE\nREQEUGAsIiIiIgIoMBYRERERARQYi4iIiIgACoxFRERERAAFxiIiIiIigAJjERERERFAgbGIiIiI\nCKDAWEREREQEUGAsIiIiIgIoMBYRERERARQYi4iIiIgACoxFRERERAAFxiIiIiIigAJjERERERFA\ngbGIiIiICKDAWEREREQEUGAsIiIiIgIoMBYRERERARQYi4iIiIgACoxFRERERAAFxiIiIiIigAJj\nERERERFAgbGIiIiICKDAWEREREQEUGAsIiIiIgIoMBYRERERARQYi4iIiIgACoxFRERERAAFxiIi\nIiIigAJjERERERFAgbGIiIiICKDAWEREREQEUGAsIiIiIgIoMBYRERERAeD/Az4phgaj/wqcAAAA\nAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1159418d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "words = list(model.wv.vocab)[:500]\n",
    "fig = plt.gcf()\n",
    "fig.set_size_inches(10.5, 6)\n",
    "for i, word in enumerate(words):\n",
    "    plt.annotate(word, xy=(result[i, 0], result[i, 1]))\n",
    "    \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**t-SNE** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"http://bokeh.pydata.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"8bbcdad0-67be-4c6d-8c48-331a0824d71d\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(global) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof (window._bokeh_onload_callbacks) === \"undefined\" || force === true) {\n",
       "    window._bokeh_onload_callbacks = [];\n",
       "    window._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "\n",
       "  \n",
       "  if (typeof (window._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    window._bokeh_timeout = Date.now() + 5000;\n",
       "    window._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    if (window.Bokeh !== undefined) {\n",
       "      var el = document.getElementById(\"8bbcdad0-67be-4c6d-8c48-331a0824d71d\");\n",
       "      el.textContent = \"BokehJS \" + Bokeh.version + \" successfully loaded.\";\n",
       "    } else if (Date.now() < window._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function run_callbacks() {\n",
       "    window._bokeh_onload_callbacks.forEach(function(callback) { callback() });\n",
       "    delete window._bokeh_onload_callbacks\n",
       "    console.info(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(js_urls, callback) {\n",
       "    window._bokeh_onload_callbacks.push(callback);\n",
       "    if (window._bokeh_is_loading > 0) {\n",
       "      console.log(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.log(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    window._bokeh_is_loading = js_urls.length;\n",
       "    for (var i = 0; i < js_urls.length; i++) {\n",
       "      var url = js_urls[i];\n",
       "      var s = document.createElement('script');\n",
       "      s.src = url;\n",
       "      s.async = false;\n",
       "      s.onreadystatechange = s.onload = function() {\n",
       "        window._bokeh_is_loading--;\n",
       "        if (window._bokeh_is_loading === 0) {\n",
       "          console.log(\"Bokeh: all BokehJS libraries loaded\");\n",
       "          run_callbacks()\n",
       "        }\n",
       "      };\n",
       "      s.onerror = function() {\n",
       "        console.warn(\"failed to load library \" + url);\n",
       "      };\n",
       "      console.log(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "    }\n",
       "  };var element = document.getElementById(\"8bbcdad0-67be-4c6d-8c48-331a0824d71d\");\n",
       "  if (element == null) {\n",
       "    console.log(\"Bokeh: ERROR: autoload.js configured with elementid '8bbcdad0-67be-4c6d-8c48-331a0824d71d' but no matching script tag was found. \")\n",
       "    return false;\n",
       "  }\n",
       "\n",
       "  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.5.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.5.min.js\"];\n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    \n",
       "    function(Bokeh) {\n",
       "      \n",
       "    },\n",
       "    \n",
       "    function(Bokeh) {\n",
       "      \n",
       "      document.getElementById(\"8bbcdad0-67be-4c6d-8c48-331a0824d71d\").textContent = \"BokehJS is loading...\";\n",
       "    },\n",
       "    function(Bokeh) {\n",
       "      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-0.12.5.min.css\");\n",
       "      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.5.min.css\");\n",
       "      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.5.min.css\");\n",
       "      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.5.min.css\");\n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if ((window.Bokeh !== undefined) || (force === true)) {\n",
       "      for (var i = 0; i < inline_js.length; i++) {\n",
       "        inline_js[i](window.Bokeh);\n",
       "      }if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < window._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!window._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      window._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      var cell = $(document.getElementById(\"8bbcdad0-67be-4c6d-8c48-331a0824d71d\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (window._bokeh_is_loading === 0) {\n",
       "    console.log(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(js_urls, function() {\n",
       "      console.log(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(this));"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[t-SNE] Computing pairwise distances...\n",
      "[t-SNE] Computing 91 nearest neighbors...\n",
      "[t-SNE] Computed conditional probabilities for sample 100 / 100\n",
      "[t-SNE] Mean sigma: 9.215973\n",
      "[t-SNE] KL divergence after 100 iterations with early exaggeration: 1.566873\n",
      "[t-SNE] Error after 350 iterations: 1.566873\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <div class=\"bk-plotdiv\" id=\"ed4b815d-7b03-4318-bb04-b782840d06e3\"></div>\n",
       "    </div>\n",
       "<script type=\"text/javascript\">\n",
       "  \n",
       "  (function(global) {\n",
       "    function now() {\n",
       "      return new Date();\n",
       "    }\n",
       "  \n",
       "    var force = false;\n",
       "  \n",
       "    if (typeof (window._bokeh_onload_callbacks) === \"undefined\" || force === true) {\n",
       "      window._bokeh_onload_callbacks = [];\n",
       "      window._bokeh_is_loading = undefined;\n",
       "    }\n",
       "  \n",
       "  \n",
       "    \n",
       "    if (typeof (window._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "      window._bokeh_timeout = Date.now() + 0;\n",
       "      window._bokeh_failed_load = false;\n",
       "    }\n",
       "  \n",
       "    var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "       \"<div style='background-color: #fdd'>\\n\"+\n",
       "       \"<p>\\n\"+\n",
       "       \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "       \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "       \"</p>\\n\"+\n",
       "       \"<ul>\\n\"+\n",
       "       \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "       \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "       \"</ul>\\n\"+\n",
       "       \"<code>\\n\"+\n",
       "       \"from bokeh.resources import INLINE\\n\"+\n",
       "       \"output_notebook(resources=INLINE)\\n\"+\n",
       "       \"</code>\\n\"+\n",
       "       \"</div>\"}};\n",
       "  \n",
       "    function display_loaded() {\n",
       "      if (window.Bokeh !== undefined) {\n",
       "        var el = document.getElementById(\"ed4b815d-7b03-4318-bb04-b782840d06e3\");\n",
       "        el.textContent = \"BokehJS \" + Bokeh.version + \" successfully loaded.\";\n",
       "      } else if (Date.now() < window._bokeh_timeout) {\n",
       "        setTimeout(display_loaded, 100)\n",
       "      }\n",
       "    }\n",
       "  \n",
       "    function run_callbacks() {\n",
       "      window._bokeh_onload_callbacks.forEach(function(callback) { callback() });\n",
       "      delete window._bokeh_onload_callbacks\n",
       "      console.info(\"Bokeh: all callbacks have finished\");\n",
       "    }\n",
       "  \n",
       "    function load_libs(js_urls, callback) {\n",
       "      window._bokeh_onload_callbacks.push(callback);\n",
       "      if (window._bokeh_is_loading > 0) {\n",
       "        console.log(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "        return null;\n",
       "      }\n",
       "      if (js_urls == null || js_urls.length === 0) {\n",
       "        run_callbacks();\n",
       "        return null;\n",
       "      }\n",
       "      console.log(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "      window._bokeh_is_loading = js_urls.length;\n",
       "      for (var i = 0; i < js_urls.length; i++) {\n",
       "        var url = js_urls[i];\n",
       "        var s = document.createElement('script');\n",
       "        s.src = url;\n",
       "        s.async = false;\n",
       "        s.onreadystatechange = s.onload = function() {\n",
       "          window._bokeh_is_loading--;\n",
       "          if (window._bokeh_is_loading === 0) {\n",
       "            console.log(\"Bokeh: all BokehJS libraries loaded\");\n",
       "            run_callbacks()\n",
       "          }\n",
       "        };\n",
       "        s.onerror = function() {\n",
       "          console.warn(\"failed to load library \" + url);\n",
       "        };\n",
       "        console.log(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "        document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "      }\n",
       "    };var element = document.getElementById(\"ed4b815d-7b03-4318-bb04-b782840d06e3\");\n",
       "    if (element == null) {\n",
       "      console.log(\"Bokeh: ERROR: autoload.js configured with elementid 'ed4b815d-7b03-4318-bb04-b782840d06e3' but no matching script tag was found. \")\n",
       "      return false;\n",
       "    }\n",
       "  \n",
       "    var js_urls = [];\n",
       "  \n",
       "    var inline_js = [\n",
       "      function(Bokeh) {\n",
       "        (function() {\n",
       "          var fn = function() {\n",
       "            var docs_json = {\"cb0e3db5-0c9a-469b-9c12-e0c1e7eac9b8\":{\"roots\":{\"references\":[{\"attributes\":{\"plot\":{\"id\":\"3642dd82-dce8-4981-97a7-c0ed0bf22fb8\",\"subtype\":\"Figure\",\"type\":\"Plot\"}},\"id\":\"bd2ff837-14d8-43b0-8676-847128e6f286\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"plot\":{\"id\":\"3642dd82-dce8-4981-97a7-c0ed0bf22fb8\",\"subtype\":\"Figure\",\"type\":\"Plot\"}},\"id\":\"e04a2a06-5fd7-456a-ad83-ab8b2eca04d6\",\"type\":\"ResetTool\"},{\"attributes\":{\"callback\":null,\"column_names\":[\"index\",\"y\",\"words\",\"x\"],\"data\":{\"index\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],\"words\":[\"eggs\",\"dorky\",\"reliving\",\"robin\",\"monkey\",\"twice\",\"ratty\",\"grants\",\"waistline\",\"lukewarm\",\"poo\",\"soaps\",\"midway\",\"armando\",\"tenderly\",\"morbid\",\"anonymous\",\"dissappointment\",\"foldout\",\"nashville\",\"sqft\",\"suffocating\",\"fruition\",\"writhing\",\"perplexing\",\"tortured\",\"poland\",\"hang\",\"definatley\",\"spray\",\"illiterate\",\"jacob\",\"insulation\",\"reeking\",\"backordered\",\"predict\",\"hash\",\"ehhhhh\",\"spree\",\"tablespoons\",\"forthright\",\"chunky\",\"cashiers\",\"shouting\",\"internally\",\"tables\",\"ipod\",\"undertaking\",\"lodge\",\"eaton\",\"clown\",\"irreparable\",\"start\",\"diffuser\",\"oldie\",\"hefe\",\"entire\",\"invigorating\",\"seems\",\"stains\",\"reeked\",\"proofs\",\"hangouts\",\"honorable\",\"civilization\",\"muesli\",\"washcloth\",\"peridot\",\"lands\",\"dif\",\"too\",\"frazzled\",\"loup\",\"maz\",\"route\",\"investigative\",\"delt\",\"rest\",\"glassy\",\"thais\",\"morel\",\"lawsuits\",\"asadero\",\"jar\",\"blossoms\",\"showman\",\"hite\",\"fitness\",\"corns\",\"neglectful\",\"appeared\",\"pontiac\",\"authors\",\"grading\",\"reheating\",\"sell\",\"incidences\",\"participating\",\"controlling\",\"bachelorette\"],\"x\":{\"__ndarray__\":\"LBtORHn4LsDKxQAv4Z1HwGgeYh8xykpAhQ4RoTEQUkB7X4xAZrFTwBTsQveRKjrA+jKQ5cHdLMCDRfp8BII4wHmlkXGnWlJAmeeqb/XiRcBirq6hpW1QwI+RzRCNFFFAwbMe0oM/McCar8T35KxCQHNAsxE1BTdAzjGd0JCKTECGsx9TDvxWQCLkzzBj3ErAcQrIVmerTcBLzOhYJaFCwC10UXeSok5Ap0rtzbExR8B5SPyqHzBRwJwSVa7y6FLAADWN+AC4UsDjhf95X+FsQLaPAxG+wSbArRfe1sEOREBpfxlj+0NJQNK1aWMvFU3AVsX/yzEPS0DNy9lBf88SQG+6yJxFu0HAWN9nR92SK8CQ1QPHTm0hwJabNRouAkfAU1jFAxx7L0DpyJ89GbZGQA8afFqODT/A+XO+OLcXQcDGHwmjxeI6QB1XkQjOZVhA2BYkpVnwEkDTFicYBUU0wDaYbD4tQErA2ieWqUcxMsDqVLEzevETQCkdoFfSbVDAHY6K8CUWMkDOcjWqkNFMwAmo1qDqmRHAQMtRFZ49KsDBXYCTcR/+P0kbHvRIjTtA/b01jI4WRkBrq3Fme8ZbwLhQNS2sXERA0yHjtBWE+T9r8yl6zpIxQPHRRVeZWvQ/LjiNnjO5P0ALvVO7J9E8QEcKxpKaehNAhECYu6rZPcDGxdDGpTohQOQACFhCYjjAraVjxd51FED7mS2AEi5LQB3KgNS3gldA9cBLvDdBRUBeCQ7gRlARQBWOlT6TNljAuVju59kVNECiAEZbMwNTwHAVNW/i2DJASNrBF7kVUMBkBxQDtTdQQLBjx04eOjzA8ypEI1daQMCnjdtjWO1NQETDQShrcThAPnhEFndmKsDczi6Wf7IZQCtCStqbh1PAh5ou146SYkAWVT1HYNVIQEgGFGOmQkJAqlq4ecjySUCPcY+ZcpQ5wOVGLwG8HkjAU/jPPo73UcAt1kRrkmVIQOzxZBqCqjNALtXy6kX5PEDLDkQFEa4jwHBf2RtMjETA/prbURpzV8AcjWAvKrtDwCS0hIAMeVRA76Uht5UaUMA=\",\"dtype\":\"float64\",\"shape\":[100]},\"y\":{\"__ndarray__\":\"VTpMe39MIsCoxn3emBlKQIgLU8FzCTvAkZFjMJdpJ8Crz8T+chhEwPnAStWgQwFA3pylnaXaREDhVm/83txEwB6sQfJU5ytAf3T5/AnYVcBQZsnIXxEowCc7+pyqgUVAHE+9cRYgPkAjF9O4MVdFQOUrM407okdAdO5Jb90rUEBY2YMD5UsZQNjEANOLtEVAxYXguEPCD0BbMw0x0H82QMYsBUxh+zpAjgA64DTRE8AFahmhROxCQCtKTid+4DFAAvTQwKV1IMAG7RbUbwxPwNVaOT9uqTJAESjybI3DVkDQd6+tqCtXQOTIylE6mlRADrkkqwIcKMCNn5Q+v7s/wClwcMfjxVJANd0wjMR6V8D1Ll9j+9dEwPJ+HPXSck3AjpS58gNpU0BSWFgwcr5JwJgjFuOVBiTAkyBrJB6zN8BcSfmOzqYqwIlJ3UQNPVVA6U+3O1svQECV4z9Tv7lVQNxMGSUbUztAfwEGqcC9O8Cbt2Owp+5QwFrTtcQxuEvAo/SUAGxII0COh6RWsQNDwPy4YAGugzTAwxXvYg72TcDJ8RpLY79VQPXeE/XtNlTAo6dONJ8xPEBPvpURATRZwIO7Xnwl8UHAPcGGoBseSkCfxO+hSRc4wJ6qgMx5IwRApFyjgEHGP8A9NsacUhZQQHTZN46p+lpA+OA77MFIREBIPstu4tkpQPo9D48z6S9AcMGVx415SMDuQoHrFiZKQGdDiYER40VAMuXWYCjMIMA7iO4C085VwCdIs5AEffo/Z0ED+dQlRsAni5wYvbVOQPbWRuoxq0BARs9RCotRMkCziVzBAaFGwOPtTKeyCFDA9UfdGDoZTUC8oJPvlCIPQF7gKM99kk/AH3dRzfN5FEALGBfk/7AmwGMaXw790ENA8Ecgik/ZJMCk5IqGT2YhQJbl700wyCFAeEByMAr/VcD2UE42XE1UwFM/2aDH9zXAbTbGm5taN8BGGQV5yu1QwLCfE23sT9w/CpTcyV/ANUDkp+NTp69QQETb1t+I+iBAAjM3PN11MsCV3BJOUYdFwF1DQSGAED/AaHxyPXrJUsA=\",\"dtype\":\"float64\",\"shape\":[100]}}},\"id\":\"e50cfd34-a5d4-48a8-a1fc-7c642daec36a\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"fill_color\":{\"value\":\"#1f77b4\"},\"line_color\":{\"value\":\"#1f77b4\"},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"33142802-6ca0-40d9-9e7c-a41d858004b1\",\"type\":\"Circle\"},{\"attributes\":{\"overlay\":{\"id\":\"f4f2dda4-f57d-4514-ac4a-49ed3b7a4d5e\",\"type\":\"BoxAnnotation\"},\"plot\":{\"id\":\"3642dd82-dce8-4981-97a7-c0ed0bf22fb8\",\"subtype\":\"Figure\",\"type\":\"Plot\"}},\"id\":\"33865c8d-c225-4091-a3c8-0dc4ce8ecab3\",\"type\":\"BoxZoomTool\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b4\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b4\"},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"3daf4698-b4c4-4b15-8115-f0fff0708375\",\"type\":\"Circle\"},{\"attributes\":{\"plot\":{\"id\":\"3642dd82-dce8-4981-97a7-c0ed0bf22fb8\",\"subtype\":\"Figure\",\"type\":\"Plot\"}},\"id\":\"17476765-ff23-4e9b-aa48-2bc619d89a71\",\"type\":\"PanTool\"},{\"attributes\":{\"callback\":null},\"id\":\"b3b2f74e-a99c-4bb2-b056-6cc0c9dc9874\",\"type\":\"DataRange1d\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":{\"value\":0.5},\"fill_color\":{\"value\":\"lightgrey\"},\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":{\"value\":1.0},\"line_color\":{\"value\":\"black\"},\"line_dash\":[4,4],\"line_width\":{\"value\":2},\"plot\":null,\"render_mode\":\"css\",\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"f4f2dda4-f57d-4514-ac4a-49ed3b7a4d5e\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"17476765-ff23-4e9b-aa48-2bc619d89a71\",\"type\":\"PanTool\"},{\"id\":\"bd2ff837-14d8-43b0-8676-847128e6f286\",\"type\":\"WheelZoomTool\"},{\"id\":\"33865c8d-c225-4091-a3c8-0dc4ce8ecab3\",\"type\":\"BoxZoomTool\"},{\"id\":\"e04a2a06-5fd7-456a-ad83-ab8b2eca04d6\",\"type\":\"ResetTool\"},{\"id\":\"4edf0e54-b2fd-4ff9-b978-cb462d4096c3\",\"type\":\"HoverTool\"},{\"id\":\"7890e7ab-c942-4653-b8b9-ab182838d721\",\"type\":\"SaveTool\"}]},\"id\":\"3ad35de8-855f-4d8f-910d-db7d35499102\",\"type\":\"Toolbar\"},{\"attributes\":{\"callback\":null,\"plot\":{\"id\":\"3642dd82-dce8-4981-97a7-c0ed0bf22fb8\",\"subtype\":\"Figure\",\"type\":\"Plot\"},\"tooltips\":[[\"word\",\"@words\"]]},\"id\":\"4edf0e54-b2fd-4ff9-b978-cb462d4096c3\",\"type\":\"HoverTool\"},{\"attributes\":{},\"id\":\"80f93e1b-7c18-40f3-ae34-db51fe2b081f\",\"type\":\"ToolEvents\"},{\"attributes\":{\"data_source\":{\"id\":\"e50cfd34-a5d4-48a8-a1fc-7c642daec36a\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"33142802-6ca0-40d9-9e7c-a41d858004b1\",\"type\":\"Circle\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"3daf4698-b4c4-4b15-8115-f0fff0708375\",\"type\":\"Circle\"},\"selection_glyph\":null},\"id\":\"85ffdd13-8b6a-4a17-9ed5-e44b15a36ad1\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"plot\":null,\"text\":\"A map of 10000 word vectors\"},\"id\":\"219a923c-427d-4481-aa22-274bb01eae1e\",\"type\":\"Title\"},{\"attributes\":{\"plot\":{\"id\":\"3642dd82-dce8-4981-97a7-c0ed0bf22fb8\",\"subtype\":\"Figure\",\"type\":\"Plot\"}},\"id\":\"7890e7ab-c942-4653-b8b9-ab182838d721\",\"type\":\"SaveTool\"},{\"attributes\":{\"min_border\":1,\"plot_width\":700,\"renderers\":[{\"id\":\"f4f2dda4-f57d-4514-ac4a-49ed3b7a4d5e\",\"type\":\"BoxAnnotation\"},{\"id\":\"85ffdd13-8b6a-4a17-9ed5-e44b15a36ad1\",\"type\":\"GlyphRenderer\"}],\"title\":{\"id\":\"219a923c-427d-4481-aa22-274bb01eae1e\",\"type\":\"Title\"},\"tool_events\":{\"id\":\"80f93e1b-7c18-40f3-ae34-db51fe2b081f\",\"type\":\"ToolEvents\"},\"toolbar\":{\"id\":\"3ad35de8-855f-4d8f-910d-db7d35499102\",\"type\":\"Toolbar\"},\"x_range\":{\"id\":\"f5b715e7-1c02-4db3-9913-9dcf144992f7\",\"type\":\"DataRange1d\"},\"y_range\":{\"id\":\"b3b2f74e-a99c-4bb2-b056-6cc0c9dc9874\",\"type\":\"DataRange1d\"}},\"id\":\"3642dd82-dce8-4981-97a7-c0ed0bf22fb8\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"callback\":null},\"id\":\"f5b715e7-1c02-4db3-9913-9dcf144992f7\",\"type\":\"DataRange1d\"}],\"root_ids\":[\"3642dd82-dce8-4981-97a7-c0ed0bf22fb8\"]},\"title\":\"Bokeh Application\",\"version\":\"0.12.5\"}};\n",
       "            var render_items = [{\"docid\":\"cb0e3db5-0c9a-469b-9c12-e0c1e7eac9b8\",\"elementid\":\"ed4b815d-7b03-4318-bb04-b782840d06e3\",\"modelid\":\"3642dd82-dce8-4981-97a7-c0ed0bf22fb8\"}];\n",
       "            \n",
       "            Bokeh.embed.embed_items(docs_json, render_items);\n",
       "          };\n",
       "          if (document.readyState != \"loading\") fn();\n",
       "          else document.addEventListener(\"DOMContentLoaded\", fn);\n",
       "        })();\n",
       "      },\n",
       "      function(Bokeh) {\n",
       "      }\n",
       "    ];\n",
       "  \n",
       "    function run_inline_js() {\n",
       "      \n",
       "      if ((window.Bokeh !== undefined) || (force === true)) {\n",
       "        for (var i = 0; i < inline_js.length; i++) {\n",
       "          inline_js[i](window.Bokeh);\n",
       "        }if (force === true) {\n",
       "          display_loaded();\n",
       "        }} else if (Date.now() < window._bokeh_timeout) {\n",
       "        setTimeout(run_inline_js, 100);\n",
       "      } else if (!window._bokeh_failed_load) {\n",
       "        console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "        window._bokeh_failed_load = true;\n",
       "      } else if (force !== true) {\n",
       "        var cell = $(document.getElementById(\"ed4b815d-7b03-4318-bb04-b782840d06e3\")).parents('.cell').data().cell;\n",
       "        cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "      }\n",
       "  \n",
       "    }\n",
       "  \n",
       "    if (window._bokeh_is_loading === 0) {\n",
       "      console.log(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "      run_inline_js();\n",
       "    } else {\n",
       "      load_libs(js_urls, function() {\n",
       "        console.log(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "        run_inline_js();\n",
       "      });\n",
       "    }\n",
       "  }(this));\n",
       "</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# importing bokeh library for interactive dataviz\n",
    "import bokeh.plotting as bp\n",
    "from bokeh.models import HoverTool, BoxSelectTool\n",
    "from bokeh.plotting import figure, show, output_notebook\n",
    "\n",
    "# defining the chart\n",
    "output_notebook()\n",
    "plot_tfidf = bp.figure(plot_width=700, plot_height=600, title=\"A map of 10000 word vectors\",\n",
    "    tools=\"pan,wheel_zoom,box_zoom,reset,hover,previewsave\",\n",
    "    x_axis_type=None, y_axis_type=None, min_border=1)\n",
    "\n",
    "# getting a list of word vectors. limit to 10000. each is of 200 dimensions\n",
    "word_vectors = list(model.wv.syn0)[:100]\n",
    "\n",
    "# dimensionality reduction. converting the vectors to 2d vectors\n",
    "from sklearn.manifold import TSNE\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=0)\n",
    "tsne_w2v = tsne_model.fit_transform(word_vectors)\n",
    "\n",
    "# putting everything in a dataframe\n",
    "import pandas as pd\n",
    "tsne_df = pd.DataFrame(tsne_w2v, columns=['x', 'y'])\n",
    "tsne_df['words'] = list(model.wv.vocab.keys())[:100]\n",
    "\n",
    "# plotting. the corresponding word appears when you hover on the data point.\n",
    "plot_tfidf.scatter(x='x', y='y', source=tsne_df)\n",
    "hover = plot_tfidf.select(dict(type=HoverTool))\n",
    "hover.tooltips={\"word\": \"@words\"}\n",
    "show(plot_tfidf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# 2-D plot with name-tags\n",
    "from sklearn.manifold import TSNE\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "def tsne_plot(model):\n",
    "    \"Creates and TSNE model and plots it\"\n",
    "    labels = []\n",
    "    tokens = []\n",
    "\n",
    "    for word in list(model.wv.vocab.keys())[:100]:\n",
    "        tokens.append(model[word])\n",
    "        labels.append(word)\n",
    "    \n",
    "    tsne_model = TSNE(n_components=2, random_state=23)\n",
    "    new_values = tsne_model.fit_transform(tokens)\n",
    "\n",
    "    x = []\n",
    "    y = []\n",
    "    for value in new_values:\n",
    "        x.append(value[0])\n",
    "        y.append(value[1])\n",
    "        \n",
    "    plt.figure(figsize=(16, 16)) \n",
    "    for i in range(len(x)):\n",
    "        plt.scatter(x[i],y[i])\n",
    "        plt.annotate(labels[i],\n",
    "                     xy=(x[i], y[i]),\n",
    "                     xytext=(5, 2),\n",
    "                     textcoords='offset points',\n",
    "                     ha='right',\n",
    "                     va='bottom')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nHD58GIDs7OwKk8pt27aRn5/PtWvXiIqKwtXVlaysLJo1a4ahoSH79u3j/Pnz973W/bi6uvLrr79y\n/fp1ioqK+P777x/pfFE7WVhYkJGR8Y/7SUtLY/369drn/6S6thBCiLqtKtfEzlYoFI6ABkgD3gLQ\naDTHFQrFRiAZKALeflBlYiGEqC0sLS1ZsmQJQUFB2NjYMHr0aK5fv46dnR0tWrTQTgmuyKBBg3jz\nzTdZuHBhmWS3Xr16REREMG7cOG7evImxsXGFW+/Y29vTpUsXMjIy+OSTT2jVqhWDBw+md+/eKJVK\nVCoVVlZWADz99NN4enpiZ2fH//3f//H2228/8N6eeeYZpk6dipubG0899RRWVlaYm5s/xrskahqN\nRoNGo0FPr+rqPZYmsa+99hoAKpUKleqBBSiFEEKIcqpsi53KJlvsCCFqOl1uWxMcHIypqSnvvfde\nlfSflJREZGQkV69epWnTpnh7ezN9+nSCgoLw9/evkmuKqpWWloavry/t27cnPj6e999/n+XLl1NQ\nUMALL7zAqlWrMDU1xcLCgmHDhvH/7N15XJV1/v//58USmChkbpim2LiyKogLg6ak0mha5hou1LdF\nUbOaHHNcs83K3+SS5VQmaeTKjIq2mFtujLEI5oIaRpbilsnHDWS5fn8AJ8kVBQ4HHvfbzVvnvK/l\nvC7enQPPc13v9xUTE6Ps7GwtX75czZs314ULFzR69Gjt2bNH2dnZmjp1qnr37q20tDQNGTJEFy5c\nkCS9//776tChg9q1a6f9+/fLw8NDw4YNU6tWrTRjxgytWbNGU6dO1ZEjR3T48GEdOXJEL7zwguUs\n7WuvvabPP/9ctWrVUoMGDeTv719q/58DAKyrPN9iBwBgQ3bv3q2YmBhlZGRo8+bNevvtt9W9e3dV\nq1ZNjz76qLXLwx04dOiQIiIi9N1332n+/Plav369EhMTFRAQoH/961+W9WrWrKnExESNGDFCM2bk\n3/79jTfeUJcuXfT9999r06ZNGjt2rC5cuKDatWvr22+/VWJiopYuXWoJo9OnT1dwcLCSkpL04osv\nXlVLSkqKvvnmG33//fd69dVXlZ2drbi4OEVHRys5OVlfffWV+DIbACCV/i12AKDSaNSokVXOwkr5\nZ2JLy4YNG5SdnS1J6tatm6Xd1dX1qsmkYFsaNmyodu3aac2aNdq3b59lZu3Lly+rffv2lvX69Okj\nSfL399d//vMfSdK6deu0evVqS6jNzMzUkSNHVK9ePY0aNUpJSUmyt7fXwYMHb6mWHj16yMnJSU5O\nTqpdu7ZOnDih7du3q3fv3nJ2dpazs7Pl1lQAgMqNEAsAuKGMjIxitcN2FM6ObZqmunbtqsWLF19z\nvcLZqq+cqdo0TUVHR6tZs2ZF1p06darq1Kmj5ORk5eXlydnZ+ZZqYUZsAMCt4nJiAMANXW/yJiZ1\nqjjatWun7du368cff5QkXbhw4aZnULt37645c+aocG6NXbt2Scr/csPd3V12dnZatGiRcnPz5268\nnRmxg4KCFBMTo8zMTJ0/f15r1qy5+UYAgAqPEAsAuKGQkBA5OjoWaXN0dFRISIiVKkJJq1WrliIj\nIzVo0CD5+Pioffv2SklJueE2kyZNUnZ2tnx8fOTp6alJkyZJkiIiIvTZZ5/J19dXKSkplrO9Pj4+\nsre3l6+vr957771bqqtNmzbq1auXfHx89PDDD8vb25svTwAAzE4MALi5wtmJMzIy5OrqqpCQEPn4\n+Fi7LFQC58+fl4uLiy5evKiOHTvqo48+UuvWra1dFgCgFNzq7MSMiQUA3JSPjw+hFWXu4M7jGvbU\nEP1y4iflmtl6YkAYARYAQIgFgNtxs/uyXrk8MjJS3bp1U7169cq4SsB2Hdx5XJuiUjQ4eLylzcHB\nTgd3HlfTtnWtWBkAwNoYEwsApSwyMlLHjh2zdhmATYldlaqcy3lF2nIu5yl2VaqVKio7aWlp8vLy\nuq1t//x5s3XrVnl6esrPz0+XLl267nYPPvgg9+EFYDMIsQBwi9544w01bdpUf/3rX3XgwAFJUmpq\nqkJDQ+Xv76/g4OCrJsNZsWKF4uPjFRYWdtM/IgH84fyZrGK1I9+fQ2xUVJTGjx+vpKQkValSxYqV\nAUDJIcQCwC1ISEjQkiVLlJSUpC+//FJxcXGSpGeffVZz5sxRQkKCZsyYoYiIiCLb9e3bVwEBAYqK\niuKPSKAYXGo4Fau9PEhLS1OLFi30zDPPyNPTU926ddOlS5eu+2VXamqq2rVrJ29vb02cOFEuLi5X\n7TM3N1djx45VmzZt5OPjo3//+9+WZW+//ba8vb3l6+urV1555aovzebMmaNly5Zp0qRJCgsL0+bN\nm9WzZ0/L9qNGjVJkZGSp/1wAoKQxJhYAbsHWrVv12GOP6e6775Yk9erVS5mZmdqxY4f69etnWS8r\n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\nAQC2hRALAAAkST/++KP+/ve/KyUlRSkpKfriiy+0bds2zZgxQ2+++WaRdceMGaMRI0bohx9+kPsV\n44yDg4O1detWSdLRo0e1b98+SdLWrVvVsWNHSfmBNSEhQfHx8Zo9e7Z+++039e/fXzExMcrOzpYk\nLViwwBKAAQC4EiEWAABIkjw8POTt7S07Ozt5enoqJCREhmHI29tbaWlpRdbdvn27Bg0aJEkaMmSI\npb0wxO7bt08tW7ZUnTp1lJ6ertjYWHXo0EGSNHv2bPn6+qpdu3b65ZdfdOjQIbm4uKhLly5as2aN\nUlJSlJ2dLW9v7zI7dgCA7WBMLADglri4uOj8+fO3vH54eLh69uypvn37lmJVKElOTk6Wx3Z2dpbn\ndnZ2ysnJuWp9wzCuarvvvvt09uxZff311+rYsaPOnDmjZcuWycXFRdWqVdPmzZu1fv16xcbG6u67\n79aDDz6ozIL7+T799NN688031bx5cz355JOldJQAAFtHiAUAAMUWFBSkJUuWaPDgwYqKiiqyrF27\ndpo5c6Y2btyo3377TX379rV8mZGRkaF77rlHd999t1JSUvS///3Psl3btm31yy+/KDExUbt37y7T\n4wEA2A4uJwYAFItpmho7dqy8vLzk7e2tpUuXWtpHjRqlZs2a6aGHHtLJkyct23z55Zdq3ry5/P39\n9fzzz6tnz56SpAsXLuipp55SYGCgWrVqpVWrVlnlmFB8s2bN0ty5c+Xt7a2jR48WWRYcHKycnBz9\n5S9/UevWrXXmzBkFBwdLkkJDQ5WTk6MWLVrolVdeUbt27Yps279/fwUFBemee+4ps2MBANgWwzRN\na9dwSwICAsz4+HhrlwEAlVbh5cTR0dGaN2+evv76a50+fVpt2rTRzp07FRsbqw8//FBff/21Tpw4\noZYtW+qTTz5Rz5491aRJE23ZskUeHh4aNGiQzp07pzVr1uif//ynWrZsqcGDB+vs2bMKDAzUrl27\nVLVqVWsfLsrY2sNrNStxlv73+v/UpHcTTRs2TT0a97B2WQCAMmQYRoJpmgE3W48zsQCAYtm2bZsG\nDRoke3t71alTR506dVJcXJy2bNliaa9Xr566dOkiSUpJSVHjxo3l4eEhSZbJgCRp3bp1mj59uvz8\n/CxjI48cOWKV44L1rD28VhO/najvRn0nw9HQ5caXNXXHVK09vNbapQEAyiHGxAIArMY0TUVHR6tZ\ns2bWLgVWNCtxlnKcc9T07aaWtszcTM1KnMXZWADAVTgTCwAoluDgYC1dulS5ubk6deqUtmzZosDA\nQHXs2NHSnp6erk2bNkmSmjVrpsOHD1tu0VI4hlaSunfvrjlz5qhwaMuuXbvK/HhgfccvHC9WOwCg\ncuNMLACgWB577DHFxsbK19dXhmHonXfeUd26dfXYY49p48aNatmype6//361b99eklSlShV98MEH\nCg0NVdWqVdWmTRvLviZNmqQXXnhBPj4+ysvLk4eHh9asWWOtQ4OV1K1aV+kX0q/ZDgDAnzGxEwCg\n1J0/f14uLi4yTVMjR45UkyZNNHBQYx1OnaHMrHQ5O7mr8QMvy71ub2uXCitYe3itpu6YqszcTEub\ns72zpnaYyuXEAFCJMLETAKDc+Pjjj+Xn5ydPT09lZGSoV+/7lJIyQZlZxySZysw6ppSUCUo/zi12\nKqMejXtoaoepcq/qLkOG3Ku6E2ABANfFmVgAQJnbvj24IMAW5exUT0FBW61QEQAAsDbOxAIAyq3M\nrKvHP96oHQAAoBAhFgBQ5pyd3IvVDgAAUIgQCwAoc40feFl2dlWKtNnZVVHjB162UkUAAMBWcIsd\nAECZK5yFmNmJAQBAcRFiAQBW4V63N6EVAAAUG5cTAwAAAABsBiEWAAAAAGAzCLEAAAAAAJtBiAUA\nAAAA2AxCLAAAAADAZhBiAQAAAAA2gxALAAAAALAZhFgAAAAAgM0gxAIAUErOnj2rDz74oET2lZaW\nJi8vr2Jv5+LiUiKvDwBAeUGIBQCglJRkiC2unJwcq7wuAACljRALAEApeeWVV5Samio/Pz+NHTtW\n7777rtq0aSMfHx9NmTJFUv4Z1hYtWuiZZ56Rp6enunXrpkuXLkmSEhIS5OvrK19fX82dO9ey39zc\nXI0dO9ayr3//+9+SpM2bNys4OFi9evVSy5Yti9QydOhQrVy50vI8LCxMq1atKu0fASqYmTNn6uLF\ni8XeLjIyUseOHSuFigBURoRYAABKyfTp0/XAAw8oKSlJXbt21aFDh/T9998rKSlJCQkJ2rJliyTp\n0KFDGjlypPbu3Ss3NzdFR0dLkp588knNmTNHycnJRfY7f/58ubq6Ki4uTnFxcfr444/1008/SZIS\nExM1a9YsHTx4sMg2/+///T9FRkZKkjIyMrRjxw716NGjlH8CqGhuJ8Tm5uYSYgGUKEIsAABlYN26\ndVq3bp1atWql1q1bKyUlRYcOHZIkeXh4yM/PT5Lk7++vtLQ0nT17VmfPnlXHjh0lSUOGDCmyr4UL\nF8rPz09t27bVb7/9ZtlXYGCgPDw8rnr9Tp066dChQzp16pQWL16sxx9/XA4ODqV92LBhFy5cUI8e\nPeTr6ysvLy+9+uqrOnbsmDp37qzOnTtLkkaMGKGAgAB5enpari6QpEaNGmncuHFq3bq1Fi9erPj4\neIWFhcnPz89ypQEA3C5+ewEAUAZM09T48eP13HPPFWlPS0uTk5OT5bm9vf1N/8g3TVNz5sxR9+7d\ni7Rv3rxZVatWve52Q4cO1eeff64lS5ZowYIFt3EUqEy+/vpr1atXT2vXrpWUfwZ/wYIF2rRpk2rW\nrClJeuONN1SjRg3l5uYqJCREu3fvlo+PjyTp3nvvVWJioiTpk08+0YwZMxQQEGCdgwFQoXAmFgCA\nUlKtWjWdO3dOktS9e3d9+umnOn/+vCTp6NGjOnny5HW3dXNzk5ubm7Zt2yZJioqKsizr3r27Pvzw\nQ2VnZ0uSDh48qAsXLty0nvDwcM2cOVOSrhozC/yZt7e3vv32W40bN05bt26Vq6vrVessW7ZMrVu3\nVqtWrbR3717t27fPsmzAgAFlWS6ASoQzsQAAlJJ7771XQUFB8vLy0sMPP6wnnnhC7du3l5R/65vP\nP/9c9vb2191+wYIFeuqpp2QYhrp162Zpf/rpp5WWlqbWrVvLNE3VqlWryKRN11OnTh21aNFCjz76\n6J0fHCq8pk2bKjExUV9++aUmTpyokJCQIst/+uknzZgxQ3FxcbrnnnsUHh6uzMxMy/IbXRUAAHfC\nME3T2jXckoCAADM+Pt7aZQAAYLMuXrwob29vJSYmXvOsWkWUlZWlHj166PTp0xo/frzq1aun4cOH\ny9HRUbGxsapSpcodv8bKlSvVtGlTy9ntyZMnq2PHjnrooYfueN/WdOzYMdWoUUPOzs5as2aNPvnk\nE6Wmpmr16tXy8PBQcnKyhg4dql27dunUqVPy8fHR22+/rfDwcDVq1Ejx8fGWy44feeQRvfTSS5ax\ntABwLYZhJJimedNxB5yJBQCggju487g+mblEn6x5S6FtB+pEyiW5tq0cIXbXrl2SpKSkJEnS8OHD\nNX78eA0ePLjEXmPlypXq2bOnJcROmzatxPZtTT/88IPGjh0rOzs7OTo66sMPP1RsbKxCQ0NVr149\nbdq0Sa1atVLz5s3VoEEDBQUFXXdf4eHhGj58uKpUqVJiXx4AqLw4EwsAQAV2cOdxbYpKUc7lPEub\nw1126hzWXE3b1rViZbfvwoUL6t+/v3799Vfl5uZq0qRJGjdunOXMX3x8vF5++WUtW7ZMHTp00KlT\np+Th4aERI0Zo/PjxcnV1VYcOHfT555/rH//4h7766isZhqGJEydaxnG+/fbb+vzzz2VnZ6eHH35Y\n06dP18cff6yPPvpIly9f1l/+8hctWrRISUlJ6tmzp1xdXeXq6qro6Gi99tpr6tmzp/r27atGjRpp\n2LBhiomJUXZ2tpYvX67mzZvr1KlTeuKJJ3Ts2DG1b99e3377rRISEixnLm3d2sNrNStxlo5fOK66\nVetqTOsx6tGYWzoBuLFbPRPLxE4AAFRgsatSiwRYScq5nKfYValWqujOFc6am5ycrD179ig0NPSa\n69WuXVuffPKJgoODlZSUpOeee069evXSu+++q6ioKP3nP/9RUlKSkpOTtX79eo0dO1bp6en66quv\ntGrVKu3cuVPJycn6xz/+IUnq06eP4uLilJycrBYtWmj+/Pnq0KGDZZ9JSUl64IEHrqqjZs2aSkxM\n1IgRIzRjxgxJ0quvvqouXbpo79696tu3r44cOVJ6P7AytvbwWk3dMVXpF9JlylT6hXRN3TFVaw+v\ntXZpACoIQiwAABXY+TNZxWq3Bbcya+6t2LZtmwYNGiR7e3vVqVNHnTp1UlxcnNavX68nn3xSd999\ntySpRo0akqQ9e/YoODhY3t7eioqK0t69e2/pdfr06SPpj3sAF772wIEDJUmhoaG65557busYyqNZ\nibOUmZtZpC0zN1OzEmdZqSIAFQ1jYgEAqMBcajhdM7C61HC6xtq24Vqz5jo4OCgvL/+M85Uz5Jak\n8PBwrVy5Ur6+voqMjNTmzZtvabvC+wDb29srJyenVGorT45fOF6sdgAoLs7EAgBQgbXv/YAc7ir6\n697hLju17331Za+24tixY7r77rs1ePBgjR07VomJiWrUqJESEhIkSdHR0be0n+DgYC1dulS5ubk6\ndeqUtmzZosDAQHXt2lULFizQxYsXJUlnzpyRJJ07d07u7u7Kzs4uct/eK+8HfKuCgoK0bNkySdK6\ndev0+++/F2v78qxu1WuPtb5eOwAUFyEWAIAKrGnbuuoc1txy5tWlhpNNT+ok5c+aGxgYKD8/P736\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x12402d908>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tsne_plot(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**From word vector to sentence vector**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we now have a trained word2vec embedding model that represents feature representation of each word in our vocabulary, we must average the word vectors so that they represent each review. This means that we must take the individual word vectors and transform them into a feature set that is the same length for every review.\n",
    "\n",
    "There exists three ways to do it: \n",
    "\n",
    "1. **Doc2Vec** - train your dataset using Doc2vec and then use the sentence vectors.\n",
    "2. **Average of Word2vec vectors** - takes the average of all the word vectors in a sentence. Then the average vector will represent your sentence vector.\n",
    "3. **Average of Word2vec vectors with TF-IDF** - takes the word vectors and multiply it with their TF-IDF sources. Just take the average and it will represent your sentence vector (highly recommendable). \n",
    "\n",
    "[Link to Kaggle tutorial](https://www.kaggle.com/c/word2vec-nlp-tutorial#description)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Method 2: Average of word2vec***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "num_features = 300\n",
    "\n",
    "def makeFeatureVec(words, model, num_features):\n",
    "    # Function to average all of the word vectors in a given paragraph\n",
    "\n",
    "    # Pre-initialize an empty numpy array (for speed)\n",
    "    featureVec = np.zeros((num_features,),dtype=\"float32\")\n",
    "\n",
    "    nwords = 0.\n",
    "\n",
    "    # Index2word is a list that contains the names of the words in \n",
    "    # the model's vocabulary. Convert it to a set, for speed \n",
    "    index2word_set = set(model.wv.index2word)\n",
    "    \n",
    "    # Loop over each word in the review and, if it is in the model's\n",
    "    # vocaublary, add its feature vector to the total\n",
    "    for word in words:\n",
    "        if word in index2word_set: \n",
    "            nwords = nwords + 1.\n",
    "            featureVec = np.add(featureVec, model[word])\n",
    "    \n",
    "    # Divide the result by the number of words to get the average\n",
    "    featureVec = np.divide(featureVec, nwords)\n",
    "    return featureVec\n",
    "\n",
    "def getAvgFeatureVecs(reviews, model, num_features):\n",
    "    # Given a set of reviews (each one a list of words), calculate \n",
    "    # the average feature vector for each one and return a 2D numpy array \n",
    "\n",
    "    # Initialize a counter\n",
    "    counter = 0.\n",
    "\n",
    "    # Preallocate a 2D numpy array, for speed\n",
    "    reviewFeatureVecs = np.zeros((len(reviews), num_features),dtype=\"float32\")\n",
    "\n",
    "    # Loop through the reviews\n",
    "    for review in reviews:\n",
    "\n",
    "       # Print a status message every 1000th review\n",
    "       if int(counter)%1000. == 0.:\n",
    "            print(\"Review %d of %d\" % (counter, len(reviews)))\n",
    "\n",
    "       # Call the function (defined above) that makes average feature vectors\n",
    "       reviewFeatureVecs[int(counter)] = makeFeatureVec(review, model, num_features)\n",
    "\n",
    "       # Increment the counter\n",
    "       counter = counter + 1.\n",
    "    return reviewFeatureVecs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating average feature vecs for train reviews\n",
      "Creating average feature vecs for test reviews\n",
      "Review 0 of 39978\n",
      "Review 1000 of 39978\n",
      "Review 2000 of 39978\n",
      "Review 3000 of 39978\n",
      "Review 4000 of 39978\n",
      "Review 5000 of 39978\n",
      "Review 6000 of 39978\n",
      "Review 7000 of 39978\n",
      "Review 8000 of 39978\n",
      "Review 9000 of 39978\n",
      "Review 10000 of 39978\n",
      "Review 11000 of 39978\n",
      "Review 12000 of 39978\n",
      "Review 13000 of 39978\n",
      "Review 14000 of 39978\n",
      "Review 15000 of 39978\n",
      "Review 16000 of 39978\n",
      "Review 17000 of 39978\n",
      "Review 18000 of 39978\n",
      "Review 19000 of 39978\n",
      "Review 20000 of 39978\n",
      "Review 21000 of 39978\n",
      "Review 22000 of 39978\n",
      "Review 23000 of 39978\n",
      "Review 24000 of 39978\n",
      "Review 25000 of 39978\n",
      "Review 26000 of 39978\n",
      "Review 27000 of 39978\n",
      "Review 28000 of 39978\n",
      "Review 29000 of 39978\n",
      "Review 30000 of 39978\n",
      "Review 31000 of 39978\n",
      "Review 32000 of 39978\n",
      "Review 33000 of 39978\n",
      "Review 34000 of 39978\n",
      "Review 35000 of 39978\n",
      "Review 36000 of 39978\n",
      "Review 37000 of 39978\n",
      "Review 38000 of 39978\n",
      "Review 39000 of 39978\n"
     ]
    }
   ],
   "source": [
    "# Calculate average feature vectors for training and testing sets using function above\n",
    "print(\"Creating average feature vecs for train reviews\")\n",
    "words_train = []\n",
    "for vector in reviews_train:\n",
    "    words_train.append(vector)\n",
    "    \n",
    "trainDataVecs = getAvgFeatureVecs(words_train, model, num_features)\n",
    "\n",
    "print(\"Creating average feature vecs for test reviews\")\n",
    "words_test = []\n",
    "for vector in reviews_test:\n",
    "    words_test.append(vector)\n",
    "\n",
    "testDataVecs = getAvgFeatureVecs(words_test, model, num_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(159914, 300)\n",
      "(39978, 300)\n"
     ]
    }
   ],
   "source": [
    "print(trainDataVecs.shape)\n",
    "print(testDataVecs.shape) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusion** <br>\n",
    "Now we have sentence vectors for both our train and test set, where we have used our trained word2vec model to average each word vector into a sentence vector for each review. In other words, we have sent our reviews in the train and test set through the word2vec model and then the output becomes an averaged sentence vector for each review. The job of the word2vec model is now done, and the next step is to use the two new datasets (trainDataVecs and testDataVecs) to build a classifier model to predict whether or not a review is positive or negative. In this case, let's try to build a logistic regression to predict the sentiment."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Predicting sentiment using a Logistic Regression classifier**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# extracting missing values from train data\n",
    "abcd = pd.DataFrame(trainDataVecs, columns = range(300)).apply(lambda x: np.isnan(x))\n",
    "index_train = abcd.loc[abcd[1] == True, ].index.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# filter out bad reviews from train data\n",
    "trainDataVecs_ = np.delete(trainDataVecs, index_train, axis = 0)\n",
    "y_train_ = np.delete(y_train, index_train, axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# extracting missing values from test data\n",
    "abcde = pd.DataFrame(testDataVecs, columns = range(300)).apply(lambda x: np.isnan(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# filter out bad reviews from test data\n",
    "testDataVecs_ = np.delete(testDataVecs, abcde.loc[abcde[1] == True, ].index.values, axis = 0)\n",
    "y_test_ = np.delete(y_test, abcde.loc[abcde[1] == True, ].index.values, axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(159912, 300)\n",
      "(39978, 300)\n"
     ]
    }
   ],
   "source": [
    "print(trainDataVecs_.shape)\n",
    "print(testDataVecs_.shape) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression, SGDClassifier\n",
    "from sklearn.metrics import confusion_matrix, roc_auc_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[13258,  6882],\n",
       "       [ 7205, 12633]])"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression, SGDClassifier\n",
    "from sklearn.metrics import confusion_matrix, roc_auc_score\n",
    "\n",
    "logic = LogisticRegression(C=1e4) # C = 1e4\n",
    "logic.fit(trainDataVecs_, y_train_)\n",
    "y_pred = logic.predict(testDataVecs_)\n",
    "confusion_matrix(y_test_, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Roc Curve**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nEKIW/gcBbMIESMbSewAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2904b02e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# roc curve for word2vec\n",
    "import scikitplot as skplt\n",
    "import matplotlib.pyplot as plt\n",
    "skplt.metrics.plot_roc_curve(y_test_, preds, title=\"\", cmap=\"OrRd\", curves='macro', text_fontsize='large')\n",
    "plt.style.use('seaborn-colorblind')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Develop Doc2vec Embedding**\n",
    "\n",
    "The input to Doc2Vec is an iterator of \"LabeledSentence objects\". Each such object represents a single sentence, and consists of two simple lists: a list of words and a list of labels, such as the following:\n",
    "```python\n",
    "sentence = LabeledSentence(words=[u'some', u'words', u'here'], labels=[u'SENT_1'])\n",
    "``` \n",
    "The algorithm then runs through the sentences iterator twice: once to build the vocab, and once to train the model on the input data, i.e. learning a vector representation for each word and for each label in the dataset. It's preferable to have a single label per sentence which is the unique identifier for the sentence. \n",
    "\n",
    "This is an example of how to build the iterator:\n",
    "\n",
    "```python\n",
    "class LabeledLineSentence(object):\n",
    "    def __init__(self, filename):\n",
    "        self.filename = filename\n",
    "    def __iter__(self):\n",
    "        for uid, line in enumerate(open(filename)):\n",
    "            yield LabeledSentence(words=line.split(), labels=['SENT_%s' % uid])\n",
    "```         \n",
    "\n",
    "When we have trained the Doc2vec embedding, we can inspect the output layer. Remember that this contains both the word vectors and the sentence vectors. For sentiment analysis, in this case particular, we are only interested in using the sentence vectors, so we should only extract that.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Import data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open('./Desktop/balanced/balanced_text.txt', 'r') as file:\n",
    "    balanced_text = file.readlines()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "balanced_labels = []\n",
    "with open('./Desktop/balanced/balanced_label.txt', 'r') as file:\n",
    "    for label in file:\n",
    "        balanced_labels.append(label.strip())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Splitting in positive and negative reviews for both training and testing set**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(200000, 2)\n",
      "(79854, 2)\n",
      "(80146, 2)\n",
      "(20146, 2)\n",
      "(19854, 2)\n"
     ]
    }
   ],
   "source": [
    "all_ = list(zip(balanced_labels, balanced_text))\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "df = pd.DataFrame(np.array(all_).reshape(-1, 2),\n",
    "                  columns = ['sentiment', 'text'])\n",
    "print(df.shape)\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(df['text'], df['sentiment'], \n",
    "                                                    test_size=0.2, random_state=42)\n",
    "\n",
    "train = pd.concat([X_train, y_train], axis = 1)\n",
    "test = pd.concat([X_test, y_test], axis = 1)\n",
    "\n",
    "train_neg = train[train['sentiment'] == '0']\n",
    "train_pos = train[train['sentiment'] == '1']\n",
    "\n",
    "test_neg = test[test['sentiment'] == '0']\n",
    "test_pos = test[test['sentiment'] == '1']\n",
    "\n",
    "print(train_neg.shape)\n",
    "print(train_pos.shape)\n",
    "print(test_neg.shape)\n",
    "print(test_pos.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exporting datasets**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1171,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open('./Desktop/Dataset/Doc2vec/X_train_neg.txt', 'w') as file:\n",
    "    for dataset in train_neg.text:\n",
    "        file.write(\"%s\" % dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1172,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open('./Desktop/Dataset/Doc2vec/X_train_pos.txt', 'w') as file:\n",
    "    for dataset in train_pos.text:\n",
    "        file.write(\"%s\" % dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1173,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open('./Desktop/Dataset/Doc2vec/X_test_neg.txt', 'w') as file:\n",
    "    for dataset in test_neg.text:\n",
    "        file.write(\"%s\" % dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1174,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open('./Desktop/Dataset/Doc2vec/X_test_pos.txt', 'w') as file:\n",
    "    for dataset in test_pos.text:\n",
    "        file.write(\"%s\" % dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# iterator to build iterator to get a labeled sentence for every review\n",
    "# Each review will get a unique label name\n",
    "from gensim import utils\n",
    "from gensim.models.doc2vec import LabeledSentence\n",
    "from random import shuffle\n",
    "\n",
    "class LabeledLineSentence(object):\n",
    "    def __init__(self, sources):\n",
    "        self.sources = sources\n",
    "        \n",
    "        flipped = {}\n",
    "        \n",
    "        # make sure that keys are unique\n",
    "        for key, value in sources.items():\n",
    "            if value not in flipped:\n",
    "                flipped[value] = [key]\n",
    "            else:\n",
    "                raise Exception('Non-unique prefix encountered')\n",
    "    \n",
    "    def __iter__(self):\n",
    "        for source, prefix in self.sources.items():\n",
    "            with utils.smart_open(source) as fin:\n",
    "                for item_no, line in enumerate(fin):\n",
    "                    yield LabeledSentence(utils.to_unicode(line).lower().split(), [prefix + '_%s' % item_no])\n",
    "    \n",
    "    def to_array(self):\n",
    "        self.sentences = []\n",
    "        for source, prefix in self.sources.items():\n",
    "            with utils.smart_open(source) as fin:\n",
    "                for item_no, line in enumerate(fin):\n",
    "                    self.sentences.append(LabeledSentence(utils.to_unicode(line).lower().split(), [prefix + '_%s' % item_no]))\n",
    "        return self.sentences\n",
    "    \n",
    "    def sentences_perm(self):\n",
    "        shuffle(self.sentences)\n",
    "        return self.sentences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sources = {'./Desktop/Dataset/Doc2vec/X_train_pos.txt':'X_train_pos', \n",
    "           './Desktop/Dataset/Doc2vec/X_train_neg.txt': 'X_train_neg',\n",
    "           './Desktop/Dataset/Doc2vec/X_test_pos.txt':'X_test_pos',\n",
    "          './Desktop/Dataset/Doc2vec/X_test_neg.txt':'X_test_neg'}\n",
    "\n",
    "sentences = LabeledLineSentence(sources)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "from gensim.models import Doc2Vec\n",
    "\n",
    "model_doc = Doc2Vec(min_count=5, window=10, size=200, sample=1e-4, negative=5, workers=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:02:24.061056\n"
     ]
    }
   ],
   "source": [
    "# building the vocabulary table based on a sentence that is transformed to an array\n",
    "t1 = datetime.now()\n",
    "model_doc.build_vocab(sentences.to_array())\n",
    "print(datetime.now() - t1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:16:23.636350\n"
     ]
    }
   ],
   "source": [
    "# Update the model's neural weights from a sequence of sentences\n",
    "t1 = datetime.now()\n",
    "model_doc.train(sentences.sentences_perm(), total_examples = model_doc.corpus_count , epochs=20) # try epocs = 20\n",
    "print(datetime.now() - t1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('great', 0.7898271083831787),\n",
       " ('decent', 0.7330671548843384),\n",
       " ('good.', 0.7314693927764893),\n",
       " ('good,', 0.6684339046478271),\n",
       " ('nice', 0.6395761966705322),\n",
       " ('bad', 0.6315627098083496),\n",
       " ('tasty', 0.6027035713195801),\n",
       " ('great.', 0.5922949910163879),\n",
       " ('great,', 0.5726982355117798),\n",
       " ('decent.', 0.5526214838027954)]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# probability distribution for similar words to 'good'\n",
    "model_doc.most_similar('good')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# saving doc2vec model\n",
    "model_doc.save('./Desktop/Dataset/Doc2vec/yelp.d2v')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from gensim.models import Doc2Vec\n",
    "# importing doc2vec model\n",
    "model_doc_import = Doc2Vec.load('./Desktop/Dataset/Doc2vec/yelp.d2v')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('fish.', 0.6895637512207031),\n",
       " ('fish,', 0.6202603578567505),\n",
       " ('nigiri', 0.5205651521682739),\n",
       " ('cod', 0.5204713344573975),\n",
       " ('unagi', 0.5132443904876709),\n",
       " ('seafood', 0.5030338764190674),\n",
       " ('salmon', 0.4975736737251282),\n",
       " ('sashimi', 0.4761657416820526),\n",
       " ('hamachi', 0.4717949330806732),\n",
       " ('flounder', 0.4706231653690338)]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_doc_import.most_similar('fish')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.05723703,  0.02506099,  0.00478442,  0.09239999,  0.2181482 ,\n",
       "        0.30090258, -0.31572685,  0.35202399, -0.081339  , -0.06962027,\n",
       "        0.18615982, -0.14495251, -0.45737255, -0.04203847, -0.00458761,\n",
       "        0.03712136, -0.1994724 ,  0.05373072, -0.51726788, -0.30555603,\n",
       "       -0.01738849,  0.35424221,  0.52311349,  0.00124774,  0.17236309,\n",
       "       -0.13164246,  0.14018424, -0.02293913, -0.09835874,  0.10018221,\n",
       "       -0.10286072,  0.05008406,  0.15384345, -0.12754834,  0.0630961 ,\n",
       "        0.1523937 ,  0.47677946,  0.53522021,  0.04636433,  0.32899195,\n",
       "       -0.09651081, -0.16787833,  0.03067501,  0.29267827,  0.00638465,\n",
       "        0.21417671,  0.10037163, -0.08897642, -0.08850767, -0.01632792,\n",
       "       -0.05703628, -0.01756952,  0.07125048, -0.1049198 , -0.07398388,\n",
       "        0.01479555, -0.09231389, -0.04096193, -0.21868256, -0.12658153,\n",
       "        0.08357162,  0.15046114,  0.14419559, -0.03851757,  0.09787857,\n",
       "        0.19067596,  0.15153609,  0.34792754,  0.17442791,  0.19240391,\n",
       "       -0.22975624, -0.11733802,  0.03347374,  0.31962633,  0.209178  ,\n",
       "        0.26742992,  0.13570836,  0.08239956,  0.03933388,  0.22048679,\n",
       "        0.13661475, -0.00803258, -0.12221056, -0.26665878, -0.075514  ,\n",
       "       -0.44625169, -0.25780755,  0.03717487, -0.15311523, -0.07461107,\n",
       "        0.12453675,  0.04326339,  0.46179059,  0.08468831,  0.17148915,\n",
       "        0.42625359, -0.13306469,  0.32480773, -0.23800826,  0.03111367,\n",
       "        0.15465298,  0.10220535,  0.31188846,  0.43834937, -0.03481703,\n",
       "        0.13196138, -0.48744193, -0.09884426, -0.02413004,  0.08286109,\n",
       "       -0.1660783 ,  0.00578601,  0.01874686, -0.12826319,  0.16030423,\n",
       "        0.0850882 , -0.11802153, -0.14119081, -0.23724954, -0.02448113,\n",
       "       -0.18717757,  0.07682488, -0.35391191, -0.04368554,  0.11096322,\n",
       "       -0.48580182, -0.05807948,  0.03851173,  0.36547798, -0.30283669,\n",
       "       -0.4040139 ,  0.25568739, -0.2109322 ,  0.33037639, -0.16610648,\n",
       "       -0.17514656, -0.08743669,  0.1504299 , -0.28837121, -0.01430856,\n",
       "        0.35250607, -0.1361718 , -0.26018715, -0.21207894,  0.12355007,\n",
       "        0.02893137,  0.20250058, -0.17917041, -0.40532181, -0.04340139,\n",
       "       -0.00914221,  0.01889767,  0.09663958, -0.10156502, -0.09861991,\n",
       "        0.20227535,  0.33992019,  0.21051964, -0.01378038, -0.0508604 ,\n",
       "        0.25295505,  0.06130611,  0.26780027,  0.25576153, -0.15652205,\n",
       "        0.25413358, -0.0588799 ,  0.15446916, -0.13745987,  0.25234836,\n",
       "       -0.41086859,  0.00805603, -0.20219466,  0.03341075,  0.27111357,\n",
       "        0.05035774,  0.45842522,  0.11107361, -0.10895593,  0.06341761,\n",
       "       -0.13332391, -0.0612978 , -0.04125918,  0.06409753, -0.21221276,\n",
       "       -0.01552015,  0.64592522,  0.08498032, -0.16823883, -0.02607503,\n",
       "       -0.49783373, -0.04709815,  0.01299929,  0.03002347,  0.29116094,\n",
       "        0.04711888, -0.01351293,  0.08622763,  0.11308493, -0.18533406], dtype=float32)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# review vectors (here first review in X_train_neg)\n",
    "model_doc_import.docvecs['X_train_neg_0']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('X_train_pos_19349', 0.5219781398773193),\n",
       " ('X_train_pos_59182', 0.5057666301727295),\n",
       " ('X_train_neg_48116', 0.5024051666259766),\n",
       " ('X_train_neg_65767', 0.5023511052131653),\n",
       " ('X_test_pos_1181', 0.4995582103729248),\n",
       " ('X_test_neg_9459', 0.4943637251853943),\n",
       " ('X_test_pos_18527', 0.4920172393321991),\n",
       " ('X_test_pos_8738', 0.49063244462013245),\n",
       " ('X_train_neg_2671', 0.48724856972694397),\n",
       " ('X_test_pos_9099', 0.48430681228637695)]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# most similar reviews (here review 0)\n",
    "model_doc_import.docvecs.most_similar(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Creating training set\n",
    "import numpy as np\n",
    "\n",
    "train_arrays = np.zeros((150000, 200))\n",
    "train_labels = np.zeros(150000)\n",
    "for i in range(75000):\n",
    "    prefix_train_pos = 'X_train_pos_' + str(i)\n",
    "    prefix_train_neg = 'X_train_neg_' + str(i)\n",
    "    train_arrays[i] = model_doc_import.docvecs[prefix_train_pos]\n",
    "    train_arrays[12500 + i] = model_doc_import.docvecs[prefix_train_neg]\n",
    "    train_labels[i] = 1\n",
    "    train_labels[12500 + i] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Creating test set\n",
    "test_arrays = np.zeros((35000, 200))\n",
    "test_labels = np.zeros(35000)\n",
    "for i in range(17500):\n",
    "    prefix_test_pos = 'X_test_pos_' + str(i)\n",
    "    prefix_test_neg = 'X_test_neg_' + str(i)\n",
    "    test_arrays[i] = model_doc_import.docvecs[prefix_test_pos]\n",
    "    test_arrays[12500 + i] = model_doc_import.docvecs[prefix_test_neg]\n",
    "    test_labels[i] = 1\n",
    "    test_labels[12500 + i] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
       "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
       "          verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# logistic regression classifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "classifier = LogisticRegression()\n",
    "classifier.fit(train_arrays, train_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.64328571428571424"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier.score(test_arrays, test_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 6132, 11368],\n",
       "       [ 1117, 16383]])"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# confusion matrix\n",
    "import seaborn as sns\n",
    "import pandas_ml as pdml\n",
    "from pandas_ml import ConfusionMatrix \n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "# test labels\n",
    "preds_ = classifier.predict(test_arrays)\n",
    "confusion_matrix(test_labels, preds_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Bag-of-Words Model **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open('./Desktop/Dataset/X_train.txt', 'r') as file:\n",
    "    X_train = file.readlines()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# tokenization function\n",
    "import re\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import PorterStemmer\n",
    "\n",
    "def review_to_words(raw_review):\n",
    "   \n",
    "    letters_only = re.sub(\"[^a-zA-Z]\", \" \", raw_review) \n",
    "\n",
    "    words = letters_only.lower().split()                             \n",
    "\n",
    "    stops = set(stopwords.words(\"english\"))                  \n",
    "\n",
    "    meaningful_words = [w for w in words if not w in stops] \n",
    "    \n",
    "    stemmer = PorterStemmer()\n",
    "    \n",
    "    stem_ = [stemmer.stem(word) for word in meaningful_words]\n",
    "\n",
    "    return(\" \".join(stem_))   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# append every review to nested list\n",
    "X_train_clean = []\n",
    "for sentence in X_train:\n",
    "    X_train_clean.append(review_to_words(sentence))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "vectorizer = CountVectorizer(analyzer = \"word\",   \n",
    "                             tokenizer = None,    \n",
    "                             preprocessor = None, \n",
    "                             stop_words = None,   \n",
    "                             max_features = 5000) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "train_data_features = vectorizer.fit_transform(X_train_clean)\n",
    "train_data_features = train_data_features.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['abandon', 'abil', 'abl', 'absolut', 'absurd', 'abund', 'abus', 'ac', 'accent', 'accept', 'access', 'accessori', 'accid', 'accident', 'accommod', 'accomod', 'accompani', 'accomplish', 'accord', 'accordingli', 'account', 'accur', 'accus', 'accustom', 'ach']\n"
     ]
    }
   ],
   "source": [
    "# Vocabulary \n",
    "vocab_ = vectorizer.get_feature_names()\n",
    "print(vocab_[:25])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# importing y_train\n",
    "text_file = open('./Desktop/Dataset/y_train.txt', 'r')\n",
    "y_train = text_file.read().split('\\n')\n",
    "y_train = [list(map(int, x)) for x in y_train]\n",
    "y_train = y_train[:-1]\n",
    "y_train = np.array(y_train).ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training the logistic regression...\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
       "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
       "          verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# training a logistic regression classifier\n",
    "print(\"Training the logistic regression...\")\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "logic = LogisticRegression()\n",
    "\n",
    "logic.fit(train_data_features, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.58955000000000002"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# importing X_test and predict on test data\n",
    "with open('./Desktop/Dataset/X_test.txt', 'r') as file:\n",
    "    X_test = file.readlines()\n",
    "    \n",
    "text_file = open('./Desktop/Dataset/y_test.txt', 'r')\n",
    "y_test = text_file.read().split('\\n')\n",
    "y_test = [list(map(int, x)) for x in y_test]\n",
    "y_test = y_test[:-1]\n",
    "y_test = np.array(y_test).ravel()\n",
    "\n",
    "test_data_features = vectorizer.transform(X_test) # shouldn't we do the same preprocessing for test data? \n",
    "test_data_features = test_data_features.toarray()\n",
    "\n",
    "logic.score(test_data_features, y_test) # 0.63744999"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_pred = logic.predict_log_proba(test_data_features)\n",
    "confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x290e844e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# roc curve for BoW\n",
    "import scikitplot as skplt\n",
    "import matplotlib.pyplot as plt\n",
    "skplt.metrics.plot_roc_curve(y_test, y_pred, title=\"\", cmap=\"OrRd\", curves='macro', text_fontsize='large')\n",
    "plt.style.use('seaborn-colorblind')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
